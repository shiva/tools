version 6.0
" ===================================================================
" Structure of this file:
" Lines starting with an inverted comma (") are comments.
" Some mappings are commented out.Remove the comment to enable them.
"
" There are three kinds of things which are defined in this file:
" Mapping ("map"), settings ("set"), and abbreviations ("ab").
"Settings affect the behaviour of commands.
"Mappings maps a key sequence to a command.
"Abbreviations define words which are replaced
"right *after* they are typed in.
" ===================================================================

let bash_is_sh = 1
set shell=/bin/bash


"autowrite: Automatically save modifications to files
"when you use critical (rxternal) commands.
set autowrite
"
"backup:backups are for wimps;-)
set nobackup
"
"background:Are we using a "light" or "dark" background?
set background=dark 
"
"compatible:Let Vim behave like Vi?Hell, no!
set nocompatible

set showmatch

"esckeys:allow usage of cursor keys within insert mode
set esckeys
"
"formatoptions:Options for the "text format" command ("gq")
"I need all those options (but 'o')!
"setformatoptions=cqrt
"
"helpheight: zero disables this.
set helpheight=0
"
"hidden:
set hidden
"
" highlight=8b,db,es,hs,mb,Mn,nu,rs,sr,tb,vr,ws
set highlight=8r,db,es,hs,mb,Mr,nu,rs,sr,tb,vr,ws
"
"hlsearch :highlight search - show the current search pattern
"This is a nice feature sometimes - but it sure can get in the
"way sometimes when you edit.
set nohlsearch
"
" icon:...
set noicon
"
" seticonstringfile of icon (Sven doesn't use an icon)
" seticonstring
"
"ignorecase:ignore the case in search patterns?NO!
set noignorecase
"
"insertmode:
" FAQ:Q: How can I quit insertmode when using this option?
"A: The option "insertmode" was not meant for "start Vim in
"insert mode" only; the idea is to *stay* in insert mode.
"Anyway, you can use the command |i_CTRL-O| to issue commands.
set noinsertmode
"
"keywordprg:Program to use for the "K" command.
" set keywordprg=man\ -s
"
"laststatus:  show status line?Yes, always!
"laststatus:Even for only one buffer.
set laststatus=2
"
" [VIM5]lazyredraw:do not update screen while executing macros
set lazyredraw
"
"magic:use some magic in search patterns?Certainly!
set magic
"
"modeline:...
"Allow the last line to be a modeline - useful when
"the last line in sig gives the preferred textwidth for replies.
"set modeline
"set modelines=1
"
"number:...
set nonumber
"
"path:The list of directories to search when you specify
"a file with an edit command.
"Note:"~/.P" is a symlink to my dir with www pages
""$VIM/syntax" is where the syntax files are.
"setpath=.,,~/.P/vim,~/.P/vim/syntax,~/.P/vim/source,$VIM/syntax/
"set path=.,../,../*/
"
"report: show a report when N lines were changed.
"report=0 thus means "show all changes"!
set report=0
"
"ruler:show cursor position?Yep!
set ruler
"
"shiftwidth:Number of spaces to use for each
"insertion of (auto)indent.
set shiftwidth=4
"
"shortmess:Kind of messages to show.Abbreviate them all!
"New since vim-5.0v: flag 'I' to suppress "intro message".
set shortmess=at
"
"showcmd:Show current uncompleted command?Absolutely!
set showcmd
"
"showmatch: Show the matching bracket for the last ')'?
set showmatch
"
"showmode:Show the current mode?YEEEEEEEEESSSSSSSSSSS!
set showmode
"
"suffixes:Ignore filename with any of these suffixes
"when using the ":edit" command.
"Most of these are files created by LaTeX.
set suffixes=.aux,.bak,.dvi,.gz,.idx,.log,.ps,.swp,.tar
"
"startofline:no:do not jump to first character with page "commands, ie keep the cursor in the current column.
set nostartofline
"
"tabstop
set tabstop=3
"
"textwidth
set textwidth=100
"
" Display the file name in the titlebat
set title
"
"ttyfast:are we using a fast terminal?
"seting depends on where I use Vim...
set ttyfast
"
"ttybuiltin:
set ttybuiltin
"
"ttyscroll:turn off scrolling -> faster! (on a slow connection)
set ttyscroll=999
"
"ttytype:
"set ttytype=builtin_xterm
"
"viminfo:What info to store from an editing session
"in the viminfo file;can be used at next session.
set viminfo=%,'50,\"100,:100,n~/.viminfo
"
" visualbell:
"set visualbell
"
"t_vb:terminal's visual bell - turned off to make Vim quiet!
"Please use this as to not annoy cow-orkers in the same room.
" Thankyou!:-)
"set t_vb=
"
"whichwrap:
set whichwrap=<,>
"
"wildcharthe char used for "expansion" on the command line
"default value is "<C-E>" but I prefer the tab key:
set wildchar=<TAB>
"
"wrapmargin:
set wrapmargin=1
"
"writebackup:
set nowritebackup
"Don't use REAL tabs...expand to spaces PLEASE
set expandtab
filetype plugin on
"filetype indent on
set cindent
"
map K <NUL>

"Toggles highlight searching
map <F5> :set hls!<bar>set hls?<CR>

noremap <Leader>r ggg?G`` 

map ;pa :set paste<CR>
map ,pa :set nopaste<CR>

map ;v <ESC>:so ~/.vimrc<ESC>

nmap <C-Down>  ddp
nmap <C-Up>    ddkP
vmap <C-Down>  xp`[V`]
vmap <C-Up>    xkP`[V`]


function! s:insert_gates()
  let gatename = substitute(toupper(expand("%:t")), "\\.", "_", "g")
  execute "normal! i#ifndef " . gatename
  execute "normal! o#define " . gatename . " "
  execute "normal! o"
  execute "normal! o#ifdef	__cplusplus"
  execute "normal! oextern \"C\" {"
  execute "normal! o#endif"
  execute "normal! o"
  execute "normal! o"
  execute "normal! o"
  execute "normal! o#ifdef	__cplusplus"
  execute "normal! o}"
  execute "normal! o#endif"
  execute "normal! o"
  execute "normal! Go#endif /* " . gatename . " */"
  normal! 6k
endfunction
autocmd BufNewFile *.{h,hpp} call <SID>insert_gates()

" smart tab completion
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction


nmap ,a :0<CR>VG

let orig_isk="a-z,A-Z,48-57,_,.,-,>"
    
"function! CleverTab()
"    let orig_isk=&iskeyword
"    set iskeyword=a-z,A-Z,48-57,_,.,-,>
"    "if the previous character wasn't white, it's a completion request
"    if !(strpart(getline('.'), col('.')-2, 1) =~ '[\->\.]')
"        let &iskeyword=orig_isk
"        return "\<Tab>"
"    elseif !(strpart(getline('.'), col('.')-2, 1) =~ '[a-zA-Z0-9_]')
"        let &iskeyword=orig_isk
"        return "\<C-N>"
"    else
"        let &iskeyword=orig_isk
"        return "\<C-X>\<C-O>"
"
"endfunction
function! CleverTab()
    let orig_isk=&iskeyword
    set iskeyword=a-z,A-Z,48-57,_,.,-,>
    "if the previous character wasn't white, it's a completion request
    if (strpart(getline('.'), col('.')-2, 1) =~ '[\->\.]')
        let &iskeyword=orig_isk
        return "\<C-X>\<C-O>"
    elseif !(strpart(getline('.'), col('.')-2, 1) =~ '[a-zA-Z0-9_]')
        let &iskeyword=orig_isk
        return "\<Tab>"
    else
        let &iskeyword=orig_isk
        return "\<C-N>"

endfunction
inoremap <tab> <c-r>=CleverTab()<cr>







function CSetup()
  call CKeyMap()
endfunction




fu! CKeyMap()
    " nmap <F5> :call DoBuild()<CR>
    " nmap <F6> :set makeprg=ct\|call CopeMaps()\|make<CR>

endfunction





" for syntax highlighting
" for color in xterm
syntax clear
syntax on


set makeprg=make 
"set errorformat=%A%f:%l:\ %m,%-Z%p^,%-C%.%# 

" set tags to search for tags or ./tags or in ./pkt/tags (for comp dirs) 
set tags=tags,./tags,./pkt/tags,~/tags;


nmap ,t :!(cd %:p:h;ctags *.[ch] )&<CR>
nmap ;m :make<CR>
nmap ,m :make clean<CR>:make<CR>
nmap ;d :Dox<CR>


nmap 'y :!echo ""> ~/.vi_tmp<CR><CR>:w! ~/.vi_tmp<CR>
vmap 'y :w! ~/.vi_tmp<CR>
nmap 'p :r ~/.vi_tmp<CR>

nmap <A-Left> <C-w>q
nmap <A-Right> :sp<CR>
nmap <A-Up> <C-w><Up>
nmap <A-Down> <C-w><Down>

autocmd Syntax c              call CSetup()

highlight Pmenu ctermbg=black gui=bold
highlight Pmenusel ctermbg=blue ctermfg=black

let g:completekey="<S-TAB>"
set completeopt=menu,menuone,longest

set nocp
filetype plugin on

let Tlist_Close_On_Select=1
let Tlist_GainFocus_On_ToggleOpen=1

nnoremap <silent> <F8> :TlistToggle<CR>

let g:DoxygenToolkit_startCommentTag="/*! "
let g:DoxygenToolkit_startCommentBlock = "/* "
let g:DoxygenToolkit_briefTag_pre="@brief " 
let g:DoxygenToolkit_paramTag_pre="@param " 
let g:DoxygenToolkit_returnTag="@return " 
"let g:DoxygenToolkit_blockHeader="--------------------------------------------------------------------------" 
"let g:DoxygenToolkit_blockFooter="----------------------------------------------------------------------------" 
let g:DoxygenToolkit_authorName="Shiva Velmurugan" 
let g:DoxygenToolkit_licenseTag="  Copyright (c) 2010 Ericsson AB. \n   All rights reserved."

"folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use


